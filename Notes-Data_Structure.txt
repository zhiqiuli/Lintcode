常见的数据结构

Binary Tree

Linked List

Queue
	支持操作：O(1) Push / O(1) Pop / O(1) Top
	主要用于BFS
	用linked list来实现
	Deque用doubly linked list来实现

Stack
	支持操作：O(1) Push / O(1) Pop / O(1) Top
	非递归实现DFS的主要数据结构
	Python中的list即可
	preorder/inorder traversal

Array

Hash (Hash Set/Hash Map)
	支持操作：O(1) Insert / O(1) Find / O(1) Delete
	Python中的dict即可
	O(1)的提前条件是O(keySize)是O(1)

Heap (Priority Queue)
	支持操作：O(log N) Add / O(log N) Remove / O(1) Min or Max
	Python:heapq
		Actually O(log N) Push / O(log N) Pop / O(1) Top
		对于Heap的题目，一般来说是用不到O(log N) Remove的
		Python默认是minheap，传入负值的话变成maxheap

		Minheap Example:	    Maxheap Example:
            10                     100
         /      \               /       \  
       20        100          80         60  
      /                      /  \        /  \
    30                     40    50    10   40

	heapq/PQ vs Heap - heapq/PQ的Remove是O(N)的
	构建一个heap的时间复杂度 -> O(N) heapq.heapify([...])
	遍历一个heap的时间复杂度 -> O(NlogN) pop操作是O(log N)的


---

Union Find

Trie

Segment Tree

---

LRU Cache
Insert Delete GetRandom O(1)
First Unique Number in Data Stream (和LRU几乎是一模一样)
Ugly Number II: O(Nlog N)做法 使用hash和heapq
K Closed Points
Top k largest numner II
	Maxheap
		保存所有元素的 add O(log N)
		return的时候，选出来以后还要放回去 O(klog N)
	Minheap（保存最大的k个）
		保存k个数 add O(klog k)
			[10,20,30,100] and k=3 > [-100,-30,-20,-10]
			Minheap
	           -100
	         /      \
	       -30       -20
Top k Frequent Elements
Merge k Sorted Linked Lists
	使用priority queue
	使用类似归并排序的分支算法

Merge Two Sorted Arrays
Merge k Sorted Interval Lists
Intersections of Two Arrays I & II
	(1) Hash
	(2) Merge 2 sorted array
	(3) Binary search
Intersections of Arrays
Sparse Matrix Multiplication

Median of Two Sorted Arrays
	FindMedian = FindKth(k=n/2)
Median of K Sorted Arrays

Maximum of Subarray

	Subarray O(n^2)
	Subsequence O(2^n)