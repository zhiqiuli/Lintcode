Short notes on combinations and permutations

---

combination 组合 需要index

permutation 排列 不需要index
                但是一个数不能使用两次 使用visited
                一般来说 排列问题需要使用visited

所有路径->回溯搜索
	permutation.add()
	visited.add()
	dfs()
	permutation.pop()
	visited.pop()

所有的点->不用回溯
此时不如使用bfs
	permutation.add()
	visited.add()
	dfs()

相对于bfs来说，dfs更节省空间。
(*) 找最短距离、连通块时，使用bfs。

---

permutation去重

存在相同时2'=2"，先挑前面的2'，再挑后面的2"。

所以存在以下情况，return或break。

nums    1 2' 2" 3
visited x x  √  x

---

list of questions

permutations I & II
N queens
next permutation I & II
string permutation I & II
word break\word ladder\word search\word pattern

Word Search:
	- Search a given word in a matrix
	- 因为搜索4个方向，存在回溯的步骤，所以考虑dfs
	- 能不能用bfs？也是可以的，但是找路径的问题可能性较多，空间耗费大。所以找路径的问题都最好用dfs来做。
